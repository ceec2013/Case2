unit OMSCProcess;

interface

uses Classes, SysUtils, Windows, FileCtrl, Dialogs, OMSC;

const
  SOH = #1;
  FIX_ClOrdID = '11=';
  FIX_LastPX = '31=';
  FIX_LastQty = '32=';
  FIX_MsgType = '35=';
  FIX_Side = '54=';
  FIX_Symbol = '55=';
  FIX_Text = '58=';
  FIX_TType = '9001=';
  FIX_TraderID = '9003=';

  FIX_LoginReply = 'LR';

  FMT_MONEY_DISPLAY = '#,##0.00#####';

var
  username : String;
  CtrCross : integer = 0;

function GetFIXTagValue(strMsgType : string; var strValue : string) : string;
function generateUniqueId: String;
procedure FIXParseMsg(MsgType : string; var MsgStr : string);
procedure FIXProcessLoginReply(text : string; ttype : Integer);

implementation

uses login;

function GetFIXTagValue(strMsgType : string; var strValue : string) : string;
var
  nIdx1, nIdx2: integer;
  strMsgTypeSOH : string;
begin
  nIdx1 := pos(strMsgType, strValue);

  if (nIdx1 > 1) and (strValue[nIdx1 - 1] <> SOH) then
    begin
      strMsgTypeSOH := SOH + strMsgType;
      nIdx1 := pos(strMsgTypeSOH, strValue);
      if (nIdx1 > 0) then nIdx1 := pos(strMsgTypeSOH, strValue) + 1;
    end;

  if (nIdx1 = 0) then
    begin
      result := '';
    end
  else if (nIdx1 = 1) or (strValue[nIdx1 - 1] = SOH) then
    begin
      nIdx2 := nIdx1;
      repeat
        if strValue[nIdx2] = SOH then break
        else inc(nIdx2);
      until nIdx2 > length(strValue);

      if nIdx2 <= length(strValue) then
        begin
          result := trim(copy(strValue, nIdx1 + length(strMsgType), (nIdx2 - (nIdx1 + length(strMsgType)))));
          delete(strValue, nIdx1, (nIdx2 - nIdx1) + 1);
        end
      else
        begin
          result:='';
        end;
    end;
end;

procedure FIXParseMsg(MsgType : string; var MsgStr : string);
var
 text : String;
 tradertype : Integer;
begin
  if MsgType = FIX_LoginReply then
    begin
      text := GetFIXTagValue(FIX_Text, MsgStr);
      tradertype := StrToInt(GetFIXTagValue(FIX_TType, MsgStr));

      //if (MsgStr <> '') then raise EExtraTagsFound.Create(ReceivedHeader.MsgSeqNum, FIX_SLR_TagNotDefined, ERR_ExtraTagsFound);

      FIXProcessLoginReply(text, tradertype);
    end
end;

procedure FIXProcessLoginReply(text : string; ttype : Integer);
begin
  if text = 'OK' then
  begin
    frmLogin.Close;

    if ttype = 1 then
    begin
      frmMain.btnViewTrader.Visible := False;
      frmMain.btnEditTrade.Visible := False;
    end;

  end
  else
  begin
    showmessage(text);
  end;
  frmMain.ClientPort.Connected := false;
end;

function generateUniqueId: String;
var
  SystemTime: TSystemTime;
  lowbitbuffer: dword;
  dwordbuffer: dword;
  GeneratedClOrdID : string[8];
  i : integer;
const
  lookuptable: Array[0..35] of  AnsiChar = (
  '0','1','2','3','4','5','6','7','8','9',
  'A','B','C','D','E','F','G','H','I','J',
  'K','L','M','N','O','P','Q','R','S','T',
  'U','V','W','X','Y','Z'); // ensure 8bit chars
begin
  GeneratedClOrdid := '        ';
  CtrCross := (CtrCross +1) mod 32768; //current encoding scheme only leaves room for 16384 calls per day before overflow.
  GetSystemTime(SystemTime);
  dwordbuffer := ((SystemTime.wYear mod 100) * (12 * 31 )) + (SystemTime.wMonth * 31 ) + (SystemTime.wDay);
  dwordbuffer := (dwordbuffer shl 15)+ CtrCross;
  for i:= 0 to 7 do //when we finally  get rid of CrossIndicator and do 8 chars, change 1 to 0
  begin
    lowbitbuffer :=  (dwordbuffer and $1F); //take the bottom 5 bits (delphi has no rotate, only shift)
    GeneratedClOrdid[8-i] := lookuptable[(lowbitbuffer mod 32)];
    dwordbuffer := dwordbuffer shr 5;
  end;
  Result := Trim(GeneratedClOrdID); //trim out whitespace (should be at the start of the string).
end;

end.
